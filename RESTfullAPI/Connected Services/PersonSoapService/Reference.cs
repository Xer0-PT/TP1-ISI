//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonSoapService
{
    using RestfullAPI.Connected_Services.PersonSoapService;
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.ServiceModel;
    using System.ServiceModel.Channels;
    using System.ServiceModel.Description;
    using System.Threading.Tasks;
    using TP1.Domain.Models;

    [GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface IPersonsChannel : IPersons, IClientChannel
    {
    }
    
    [DebuggerStepThroughAttribute()]
    [GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class PersonsClient : ClientBase<IPersons>, IPersons
    {
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(ServiceEndpoint serviceEndpoint, ClientCredentials clientCredentials);
        
        public PersonsClient() : 
                base(PersonsClient.GetDefaultBinding(), PersonsClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPersons.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonsClient(EndpointConfiguration endpointConfiguration) : 
                base(PersonsClient.GetBindingForEndpoint(endpointConfiguration), PersonsClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonsClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PersonsClient.GetBindingForEndpoint(endpointConfiguration), new EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonsClient(EndpointConfiguration endpointConfiguration, EndpointAddress remoteAddress) : 
                base(PersonsClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonsClient(Binding binding, EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }


        public async Task<Person> GetPersonAsync(int id)
        {
            return await base.Channel.GetPersonAsync(id);
        }

        public async Task<Person> CreatePersonAsync(Person person)
        {
            return await base.Channel.CreatePersonAsync(person);
        }
        
        public async Task<List<Person>> GetAllPersonsAsync()
        {
            return await base.Channel.GetAllPersonsAsync();
        }
        
        public async Task<bool> UpdatePersonAsync(int id, System.Nullable<bool> covid, string name, string snsNumber, string email)
        {
            return await base.Channel.UpdatePersonAsync(id, covid, name, snsNumber, email);
        }
        
        public async Task<List<Person>> GetAllActivePersonsAsync()
        {
            return await base.Channel.GetAllActivePersonsAsync();
        }
        
        public async Task<bool> DeletePersonAsync(int id)
        {
            return await base.Channel.DeletePersonAsync(id);
        }
        
        public async Task<bool> CreatePersonCovidAsync(PersonCovid person)
        {
            return await base.Channel.CreatePersonCovidAsync(person);
        }
        
        public async Task<List<PersonCovid>> GetAllCovidPeopleAsync()
        {
            return await base.Channel.GetAllCovidPeopleAsync();
        }
        
        public async Task<bool> CreatePersonContactAsync(PersonContact person)
        {
            return await base.Channel.CreatePersonContactAsync(person);
        }
        
        public async Task<List<Person>> GetAllContactsAsync(int infectedId, DateTime date)
        {
            return await base.Channel.GetAllContactsAsync(infectedId, date);
        }
        
        private static Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPersons))
            {
                BasicHttpBinding result = new BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPersons))
            {
                return new EndpointAddress("http://localhost:56021/Services/Persons.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static Binding GetDefaultBinding()
        {
            return PersonsClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPersons);
        }
        
        private static EndpointAddress GetDefaultEndpointAddress()
        {
            return PersonsClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPersons);
        }

        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPersons,
        }
    }
}
